#+TITLE: Functional Programming in Scala with Cats 
#+AUTHOR: Sam Halliday
#+DATE: 2017-04-05

#+TAGS: ME OTHER
#+TODO: TODO | RESEARCH | NOTES | CHART | DIAGRAM | DRAWING | CODE | VIDEO

* Introduction

This book is for Scala developers with an Object Oriented (OOP)
background who wish to learn the *Functional Programming* (FP)
paradigm.

Until now, Scala has lacked a practical introduction to FP. We do not
believe that learning Haskell should be a prerequisite. We also do not
accept that the merits of FP are obvious. Therefore, this book
justifies every concept with practical examples, in Scala.

We recommend [[https://www.manning.com/books/functional-programming-in-scala][The Red Book]] as optional further reading. It is a
textbook to learn the fundamentals and write your own FP library in
Scala, serving a different purpose than this book.

We also recommend [[http://haskellbook.com/][Haskell Programming from First Principles]] as
optional further reading. FP innovation has traditionally been in
Haskell because it is the academic standard. But Scala has gained much
more traction in industry and brings with it features, stability,
interop, powerful frameworks and a commercial ecosystem.

* Copyleft Notice

This book is *Libre* and follows the philosophy of [[https://www.gnu.org/philosophy/free-sw.en.html][Free Software]] for
books: you can use this book as you like, you can redistribute this
book and you can distribute your own version. That means you can print
it, photocopy it, e-mail it, post it on social media, upload it to
websites, change it, remix it, delete bits, and draw all over it. You
can even sell it.

This book is *Copyleft*: if you change the book and distribute your
own version, it must also pass on these freedoms to its recipients.

This book uses the [[https://creativecommons.org/licenses/by-sa/4.0/legalcode][Creative Commons Attribution ShareAlike 4.0
International]] (CC BY-SA 4.0) license.

* Thanks

Thanks are due to the members of the community who helped by
explaining the principles involved.

Diego Esteban Alonso Blas, Raúl Raja Martínez and Peter Neyens of 47
degrees for their help with understanding the principles of FP, cats
and freestyle. Yi Lin Wei and Zainab Ali for their tutorials at Hack
The Tower meetups.

Juan Manuel Serrano for [[https://skillsmatter.com/skillscasts/9904-london-scala-march-meetup#video][All Roads Lead to Lambda]], Pere Villega for [[http://perevillega.com/understanding-free-monads][On
Free Monads]], Dick Wall Josh Suereth for [[https://www.youtube.com/watch?v=WDaw2yXAa50][For: What is it Good For?]],
John de Goes for [[http://degoes.net/articles/easy-monads][A Beginner Friendly Tour]].

Those who helped explain concepts needed to write the example project
[[https://github.com/fommil/drone-dynamic-agents/issues?q=is%3Aissue+is%3Aopen+label%3A%22needs+guru%22][drone-dynamic-agents]]: Paul Snively.

The helpful souls on the [[https://gitter.im/typelevel/cats][cats]] chat room: Merlin Göttlinger, Edmund
Noble, Rob Norris, Adelbert Chang, Kai(luo) Wang.

The helpful souls on the [[https://gitter.im/functional-streams-for-scala/fs2][fs2]] chat room: Michael Pilquist, Adam
Chlupacek, Pavel Chlupacek.

* Practicalities

If you'd like to set up a project that uses the libraries presented in
this book, you will need to use a recent version of Scala with some
FP-specific features enabled (e.g. in =build.sbt=):

#+BEGIN_SRC scala
scalaVersion in ThisBuild := "2.12.1"
//scalaOrganization in ThisBuild := "org.typelevel"
scalacOptions in ThisBuild += "-Ypartial-unification"
#+END_SRC

and add the following dependencies to your project's settings:

#+BEGIN_SRC scala
libraryDependencies ++= Seq(
  "io.circe" %% "circe-core",
  "io.circe" %% "circe-generic",
  "io.circe" %% "circe-parser"
).map(_ % "0.7.0") ++ Seq(
  "org.typelevel" %% "cats"     % "0.9.0",
  "com.spinoco"   %% "fs2-http" % "0.1.6"
)

resolvers += Resolver.sonatypeRepo("snapshots")
addCompilerPlugin("org.scalamacros" %  "paradise"  % "2.1.0" cross CrossVersion.full)
libraryDependencies += "com.47deg"  %% "freestyle" % "0.1.0-SNAPSHOT"
#+END_SRC

In order to keep our snippets short, we will omit the =import=
section. Unless told otherwise, assume that all snippets have the
following imports:

#+BEGIN_SRC scala
import cats._
import cats.implicits._
import freestyle._
import freestyle.implicits._
#+END_SRC

* TODO Brief history of abstraction

Inspired by [[https://skillsmatter.com/skillscasts/9904-london-scala-march-meetup][Roads to Lambda]], motivate the natural progression of
abstraction from Java 1.0 to flat-mapping over a container, but
slightly differently:

- Problem: abstract over elements of a container
  - object on a =List=
  - runtime exception
  - workaround with =ListString= boilerplate
  - paradigm: generics

- Today's abstraction problem: the containers themselves / execution
  - type constructors (feel free to think of as containers)
  - procedural code with an interface defining =doThenEtc=
  - this is just =flatMap=, the container is commonly called a =Monad=

* TODO =for=

We're going to be using these a lot. Need to be comfortable with it.

Include a lot of stuff from "For: what is it good for?"

** Example: =drone-dynamic-agents=

Just the high level concepts. Ask the reader to suspend their belief
of =@free= and we'll explain what it's doing later, plus the algebraic
mixing.

And an =Id= based test to show that we can really write business logic
tests without a real implementation.

An architect's dream: you can focus on algebras, business logic and
functional requirements, and delegate the implementations to your
teams.

* TODO Pure business logic

(the cross-over from previous section is not yet clear)

We can define things that are like Java =interface=s, but with the
container and its implementation abstracted away, called an Algebra.

We can write all our business logic solely by combining these
algebras. If you ever want to call some code that can throw an
exception or speaks to the outside world, wrap it in an algebra so it
can be abstracted.

Everything can now be mocked, and we can write tests just of the
business logic.

Include some thoughts from [[http://degoes.net/articles/easy-monads][Beginner Friendly Tour]]

* RESEARCH Parallel work

Generating the initial state and https://github.com/fommil/drone-dynamic-agents/issues/6

Might require a moment to explain =FreeApplicative= (I'd rather not get into details yet).

* TODO Reality Check

- solved initial abstraction problem
- clean way to write logic and divide labour
- easier to write maintainable and testable code

Three steps forward but one step back: performance.

High level overview of what =@free= and =@module= is doing, and the
concept of trampolining. For a detailed explanation of free style and
the cats free monad implementation, see the appendix.

** RESEARCH perf numbers

* TODO Typeclasses

look into the oauth / google / drone algebras as examples.

how cats uses typeclasses, e.g. to provide the =flatMap= on the free
monad and =|+|= on applicatives.

Discourage hierarchies except for ADTs

* TODO Cats
** RESEARCH typeclasses

Foldable being imminently more interesting than the others.

Traversable will need to be discussed, seems to come up a lot.

** RESEARCH data types

Not really sure what to say here.

* TODO Spotting patterns, refactoring

Note that some of our algebras are actually common things and can be
rewritten: reader / writer / state / error / indexed monad. It's ok
that this is a step you can do later.

These are called Effects.

* CODE FS2 Streams

The basics, and covering the Effect, which can be our free monad.

Why streams are so awesome. I'd like a simple example here of reading
from a huge data source, doing parallel work and then writing out in
order to a (slower) device to demonstrate backpressure and constant
memory overhead. Maybe compare this vs hand rolled and akka streams
for a perf test?

Rewrite our business logic to be streaming, convert our GET api into a
=Stream= by polling.

* RESEARCH Monad Transformers

Maybe too early? Let's say put it here if we need it for the
interpreters, otherwise after Optics.

* TODO interpreters

Show that although interpreters can be as messy as you like, you can
continue to write them as a pure core with side effects pushed to the
outside.

* TODO type refinement

instead of needing those =error= calls in the first place, just don't
allow them to happen at your layer if you can get away with it.

Protect yourself from mistyping

* RESEARCH Optics

not sure what the relevance to this project would be yet.

* TODO Appendix: Free implementation

detailed explanation about what =@free= / =@module= is generating and
how that feeds into the cats =Free= implementation.
* RESEARCH Appendix: tagless final style
