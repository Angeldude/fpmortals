rules = [
  Disable,
  DisableUnless,
  DisableSyntax,
  ExplicitResultTypes,
  LeakingImplicitClassVal,
  MissingFinal,
  NoInfer,
  RemoveUnusedImports,
  RemoveUnusedTerms
]

Disable.symbols = [
# bad code needs cleaned up
#  "scala.Option.get"

# picks up macro expansions... *sigh*
#  "scala.Any.asInstanceOf"
]

DisableUnless.symbols = [
    {
        unless = "scalaz.effect.IO"
        symbols = [
          "scala.Predef.println",
          "java.lang.System.currentTimeMillis",
          "scala.io",
          "java.io"
        ]
    }
]

DisableSyntax.keywords = [return, null]
DisableSyntax.noSemicolons = true
DisableSyntax.noXml = true
DisableSyntax.noCovariantTypes = true
DisableSyntax.noContravariantTypes = true
DisableSyntax.noValInAbstract = true
DisableSyntax.noImplicitObject = true
#DisableSyntax.noImplicitConversion = false

# DisableSyntax.regex = [
#   {
#     id = "redundant"
#     pattern = "Type"
#     message = "That's a really bad name."
#   }
# ]

ExplicitResultTypes {
  unsafeShortenNames = true
}

NoInfer.symbols = [
  "scala.Predef.any2stringadd"
  "scala.Any"
  "scala.AnyVal"
  "scala.Product"

  # false positives?
  # "scala.Serializable"
]
